//+------------------------------------------------------------------+
//|                                                      Gen4x.mq4   |
//|                        Generated by CEO                     |
//|                                                                  |
//+------------------------------------------------------------------+
#property strict

//--- input parameters
input double Lots = 0.1;                // Position size
input double RiskPercent = 1.0;         // Risk percentage per trade
input double StopLossFactor = 2.0;      // Stop loss factor (multiplier of ATR)
input double TakeProfitFactor = 2.0;    // Take profit factor (multiplier of ATR)
input int MA1_Period = 10;              // Short-term MA period
input int MA2_Period = 50;              // Long-term MA period
input int RSI_Period = 14;              // RSI period
input int MACD_FastEMA = 12;            // MACD fast EMA period
input int MACD_SlowEMA = 26;            // MACD slow EMA period
input int MACD_SignalSMA = 9;           // MACD signal SMA period
input int BB_Period = 20;               // Bollinger Bands period
input double BB_Deviation = 2.0;        // Bollinger Bands deviation
input int ADX_Period = 14;              // ADX period

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   // Indicator handles and buffers initialization
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   // Calculate indicators
   double ma1 = iMA(NULL, 0, MA1_Period, 0, MODE_SMA, PRICE_CLOSE, 0);
   double ma2 = iMA(NULL, 0, MA2_Period, 0, MODE_SMA, PRICE_CLOSE, 0);
   double rsi = iRSI(NULL, 0, RSI_Period, PRICE_CLOSE, 0);

   double macd_main = iMACD(NULL, 0, MACD_FastEMA, MACD_SlowEMA, MACD_SignalSMA, PRICE_CLOSE, MODE_MAIN, 0);
   double macd_signal = iMACD(NULL, 0, MACD_FastEMA, MACD_SlowEMA, MACD_SignalSMA, PRICE_CLOSE, MODE_SIGNAL, 0);

   double upperBB = iBands(NULL, 0, BB_Period, BB_Deviation, 0, PRICE_CLOSE, MODE_UPPER, 0);
   double lowerBB = iBands(NULL, 0, BB_Period, BB_Deviation, 0, PRICE_CLOSE, MODE_LOWER, 0);
   double adx = iADX(NULL, 0, ADX_Period, PRICE_CLOSE, MODE_MAIN, 0);

   // Debug output
   Print("ma1: ", ma1, ", ma2: ", ma2, ", rsi: ", rsi, ", macd_main: ", macd_main, ", macd_signal: ", macd_signal);
   Print("upperBB: ", upperBB, ", lowerBB: ", lowerBB, ", adx: ", adx);

   // Define entry criteria
   bool buySignal = (ma1 > ma2 && rsi < 30 && macd_main > macd_signal && Close[0] <= lowerBB && adx > 25);
   bool sellSignal = (ma1 < ma2 && rsi > 70 && macd_main < macd_signal && Close[0] >= upperBB && adx > 25);

   // Debug entry conditions
   Print("buySignal: ", buySignal, ", sellSignal: ", sellSignal);

   // Check for open positions
   bool hasPosition = (OrdersTotal() > 0);

   // Entry conditions
   if (buySignal && !hasPosition)
     {
      double stopLoss = Close[0] - StopLossFactor * iATR(NULL, 0, 14, 0);
      double takeProfit = Close[0] + TakeProfitFactor * iATR(NULL, 0, 14, 0);
      int ticket = OrderSend(Symbol(), OP_BUY, Lots, Ask, 3, stopLoss, takeProfit, "Buy Order", 0, 0, Green);
      if (ticket < 0)
        {
         Print("OrderSend failed with error #", GetLastError());
        }
      else
        {
         Print("Buy order placed successfully.");
        }
     }
   else if (sellSignal && !hasPosition)
     {
      double stopLoss = Close[0] + StopLossFactor * iATR(NULL, 0, 14, 0);
      double takeProfit = Close[0] - TakeProfitFactor * iATR(NULL, 0, 14, 0);
      int ticket = OrderSend(Symbol(), OP_SELL, Lots, Bid, 3, stopLoss, takeProfit, "Sell Order", 0, 0, Red);
      if (ticket < 0)
        {
         Print("OrderSend failed with error #", GetLastError());
        }
      else
        {
         Print("Sell order placed successfully.");
        }
     }

   // Exit conditions
   for (int i = OrdersTotal() - 1; i >= 0; i--)
     {
      if (OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
         if (OrderType() == OP_BUY && (Close[0] >= upperBB || macd_main < macd_signal))
           {
            if (!OrderClose(OrderTicket(), OrderLots(), Bid, 3, Green))
              {
               Print("OrderClose failed with error #", GetLastError());
              }
            else
              {
               Print("Buy order closed successfully.");
              }
           }
         else if (OrderType() == OP_SELL && (Close[0] <= lowerBB || macd_main > macd_signal))
           {
            if (!OrderClose(OrderTicket(), OrderLots(), Ask, 3, Red))
              {
               Print("OrderClose failed with error #", GetLastError());
              }
            else
              {
               Print("Sell order closed successfully.");
              }
           }
        }
     }
  }
//+------------------------------------------------------------------+
